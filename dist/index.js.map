{"version":3,"sources":["../src/index.ts","../src/framework/runtime-action/index.ts","../src/framework/runtime-action/types.ts","../src/framework/runtime-action/response/index.ts","../src/framework/runtime-action/parameters/index.ts","../src/framework/runtime-action/validator/index.ts","../src/framework/event-consumer-action/index.ts","../src/framework/graphql-action/index.ts","../src/framework/webhook-action/index.ts","../src/framework/webhook-action/response/types.ts","../src/framework/webhook-action/response/index.ts","../src/framework/webhook-action/types.ts","../src/framework/openwhisk/index.ts","../src/framework/openwhisk-action/index.ts","../src/integration/bearer-token/index.ts","../src/integration/rest-client/index.ts","../src/commerce/adobe-auth/index.ts"],"sourcesContent":["/**\n * Copyright © Adobe, Inc. All rights reserved.\n */\n\n/**\n * App utilities and features for Adobe Commerce AIO Toolkit\n */\n\n// Export Framework utilities\nexport * from './framework';\n\n// Export Integration utilities\nexport * from './integration';\n\n// Export Commerce utilities\nexport * from './commerce';\n","/**\n * Copyright © Adobe, Inc. All rights reserved.\n */\n\nimport { Core } from '@adobe/aio-sdk';\n\nimport RuntimeActionResponse from './response';\nimport Parameters from './parameters';\nimport Validator from './validator';\n\nimport { HttpStatus, HttpMethod } from './types';\nimport { RuntimeActionResponseType } from './response/types';\n\nclass RuntimeAction {\n  /**\n   * @param name\n   * @param httpMethods\n   * @param requiredParams\n   * @param requiredHeaders\n   * @param action\n   * @returns {(function(*): Promise<any>)|*}\n   */\n  static execute(\n    name: string = 'main',\n    httpMethods: HttpMethod[] = [],\n    requiredParams: string[] = [],\n    requiredHeaders: string[] = [],\n    action: (\n      params: { [key: string]: any },\n      ctx: { logger: any; headers: { [key: string]: any } }\n    ) => Promise<RuntimeActionResponseType> = async (\n      _params\n    ): Promise<RuntimeActionResponseType> => {\n      return { statusCode: HttpStatus.OK, body: {} };\n    }\n  ): (params: { [key: string]: any }) => Promise<RuntimeActionResponseType> {\n    return async (params: { [key: string]: any }) => {\n      // create a Logger\n      const logger = Core.Logger(name, { level: params.LOG_LEVEL || 'info' });\n\n      try {\n        // 'info' is the default level if not set\n        logger.info(`Calling the ${name} action`);\n\n        // log parameters, only if params.LOG_LEVEL === 'debug'\n        logger.debug(Parameters.stringify(params));\n\n        // validate request\n        const validationError = RuntimeAction.validateRequest(\n          params,\n          requiredParams,\n          requiredHeaders,\n          httpMethods,\n          logger\n        );\n        if (validationError) {\n          return validationError;\n        }\n\n        const result = await action(params, { logger: logger, headers: params.__ow_headers || {} });\n        // log the error\n        logger.info(result);\n        return result;\n      } catch (error) {\n        // log any server errors\n        logger.error(error);\n        // return with 500\n        return RuntimeActionResponse.error(HttpStatus.INTERNAL_ERROR, 'server error');\n      }\n    };\n  }\n\n  private static validateRequest(\n    params: { [key: string]: any },\n    requiredParams: string[],\n    requiredHeaders: string[],\n    httpMethods: HttpMethod[],\n    logger: any\n  ): RuntimeActionResponseType | null {\n    // check for missing request input parameters and headers\n    const errorMessage =\n      Validator.checkMissingRequestInputs(params, requiredParams, requiredHeaders) ?? '';\n    if (errorMessage) {\n      // return and log client errors\n      return RuntimeActionResponse.error(HttpStatus.BAD_REQUEST, errorMessage);\n    }\n\n    // validate HTTP method\n    const requestMethod = params.__ow_method;\n    if (httpMethods.length > 0 && !httpMethods.includes(requestMethod)) {\n      const errorMessage = `Invalid HTTP method: ${requestMethod}. Allowed methods are: ${httpMethods.join(', ')}`;\n      logger.error(errorMessage);\n      return RuntimeActionResponse.error(HttpStatus.METHOD_NOT_ALLOWED, errorMessage);\n    }\n\n    return null;\n  }\n}\n\nexport default RuntimeAction;\n","/**\n * Copyright © Adobe, Inc. All rights reserved.\n */\n\nexport enum HttpStatus {\n  OK = 200,\n  BAD_REQUEST = 400,\n  UNAUTHORIZED = 401,\n  NOT_FOUND = 404,\n  METHOD_NOT_ALLOWED = 405,\n  INTERNAL_ERROR = 500,\n}\n\nexport enum HttpMethod {\n  GET = 'get',\n  POST = 'post',\n  PUT = 'put',\n  DELETE = 'delete',\n  PATCH = 'patch',\n  HEAD = 'head',\n  OPTIONS = 'options',\n}\n","/**\n * Copyright © Adobe, Inc. All rights reserved.\n */\n\nimport { HttpStatus } from '../types';\nimport { SuccessResponse, ErrorResponse } from './types';\n\nclass RuntimeActionResponse {\n  /**\n   * Returns a success response object, this method should be called on the handlers actions\n   *\n   * @param response a descriptive message of the result\n   *        e.g. 'missing xyz parameter'\n   * @param headers optional headers to include in the response\n   * @returns the response object, ready to be returned from the action main's function.\n   */\n  static success(\n    response: object | string,\n    headers: { [key: string]: string } = {}\n  ): SuccessResponse {\n    return {\n      statusCode: HttpStatus.OK,\n      body: response,\n      headers: headers,\n    };\n  }\n\n  /**\n   * Returns an error response object, this method should be called on the handlers actions\n   *\n   * @param statusCode the status code.\n   *        e.g. 400\n   * @param error a descriptive message of the result\n   *        e.g. 'missing xyz parameter'\n   * @returns the response object, ready to be returned from the action main's function.\n   */\n  static error(statusCode: HttpStatus, error: string): ErrorResponse {\n    return {\n      error: {\n        statusCode,\n        body: {\n          error: error,\n        },\n      },\n    };\n  }\n}\n\nexport default RuntimeActionResponse;\n","/**\n * Copyright © Adobe, Inc. All rights reserved.\n */\n\nclass Parameters {\n  /**\n   * Returns a log-ready string of the action input parameters.\n   * The `Authorization` header content will be replaced by '<hidden>'.\n   *\n   * @param params action input parameters.\n   *\n   * @returns string\n   */\n  static stringify(params: { [key: string]: any }): string {\n    // hide authorization token without overriding params\n    let headers = params.__ow_headers || {};\n    if (headers.authorization) {\n      headers = { ...headers, authorization: '<hidden>' };\n    }\n    return JSON.stringify({ ...params, __ow_headers: headers });\n  }\n}\n\nexport default Parameters;\n","/**\n * Copyright © Adobe, Inc. All rights reserved.\n */\n\nclass Validator {\n  /**\n   * Returns the list of missing keys given an object and its required keys.\n   * A parameter is missing if its value is undefined or ''.\n   * A value of 0 or null is not considered as missing.\n   *\n   * @param obj object to check.\n   * @param required list of required keys.\n   *        Each element can be multi-level deep using a '.' separator e.g. 'myRequiredObj.myRequiredKey'\n   *\n   * @returns array\n   * @private\n   */\n  static getMissingKeys(obj: { [key: string]: any }, required: string[]): string[] {\n    return required.filter(r => {\n      const splits = r.split('.');\n      const last = splits[splits.length - 1];\n      const traverse = splits.slice(0, -1).reduce((tObj, split) => tObj[split] || {}, obj);\n      return last && (traverse[last] === undefined || traverse[last] === ''); // missing default params are empty string\n    });\n  }\n\n  /**\n   * Returns the list of missing keys given an object and its required keys.\n   * A parameter is missing if its value is undefined or ''.\n   * A value of 0 or null is not considered as missing.\n   *\n   * @param params action input parameters.\n   * @param requiredHeaders list of required input headers.\n   * @param requiredParams list of required input parameters.\n   *        Each element can be multi-level deep using a '.' separator e.g. 'myRequiredObj.myRequiredKey'.\n   *\n   * @returns string|null if the return value is not null, then it holds an error message describing the missing inputs.\n   *\n   */\n  static checkMissingRequestInputs(\n    params: { [key: string]: any },\n    requiredParams: string[] = [],\n    requiredHeaders: string[] = []\n  ): string | null {\n    let errorMessage: string | null = null;\n\n    // input headers are always lowercase\n    requiredHeaders = requiredHeaders.map(h => h.toLowerCase());\n    // normalize header keys to lowercase for case-insensitive comparison\n    const normalizedHeaders = Object.keys(params.__ow_headers || {}).reduce(\n      (acc, key) => {\n        acc[key.toLowerCase()] = params.__ow_headers?.[key];\n        return acc;\n      },\n      {} as { [key: string]: any }\n    );\n    // check for missing headers\n    const missingHeaders = Validator.getMissingKeys(normalizedHeaders, requiredHeaders);\n    if (missingHeaders.length > 0) {\n      errorMessage = `missing header(s) '${missingHeaders.join(', ')}'`;\n    }\n\n    // check for missing parameters\n    const missingParams = Validator.getMissingKeys(params, requiredParams);\n    if (missingParams.length > 0) {\n      if (errorMessage) {\n        errorMessage += ' and ';\n      } else {\n        errorMessage = '';\n      }\n      errorMessage += `missing parameter(s) '${missingParams.join(', ')}'`;\n    }\n\n    return errorMessage;\n  }\n}\n\nexport default Validator;\n","/**\n * Adobe App Builder Event Consumer Action handler\n *\n * Copyright © Adobe, Inc. All rights reserved.\n */\n\nimport { Core } from '@adobe/aio-sdk';\n\nimport RuntimeActionResponse from '../runtime-action/response';\nimport Parameters from '../runtime-action/parameters';\nimport Validator from '../runtime-action/validator';\n\nimport { HttpStatus } from '../runtime-action/types';\nimport { RuntimeActionResponseType } from '../runtime-action/response/types';\n\nclass EventConsumerAction {\n  /**\n   * @param name\n   * @param requiredParams\n   * @param requiredHeaders\n   * @param action\n   * @returns {(function(*): Promise<any>)|*}\n   */\n  static execute(\n    name: string = 'main',\n    requiredParams: string[] = [],\n    requiredHeaders: string[] = [],\n    action: (\n      params: { [key: string]: any },\n      ctx: { logger: any; headers: { [key: string]: any } }\n    ) => Promise<RuntimeActionResponseType> = async (\n      _params\n    ): Promise<RuntimeActionResponseType> => {\n      return { statusCode: HttpStatus.OK, body: {} };\n    }\n  ): (params: { [key: string]: any }) => Promise<RuntimeActionResponseType> {\n    return async (params: { [key: string]: any }) => {\n      // create a Logger\n      const logger = Core.Logger(name, { level: params.LOG_LEVEL || 'info' });\n\n      try {\n        // 'info' is the default level if not set\n        logger.info(`Calling the ${name} action`);\n\n        // log parameters, only if params.LOG_LEVEL === 'debug'\n        logger.debug(Parameters.stringify(params));\n\n        // check for missing request input parameters and headers\n        const errorMessage =\n          Validator.checkMissingRequestInputs(params, requiredParams, requiredHeaders) || '';\n        if (errorMessage) {\n          // return and log client errors\n          return RuntimeActionResponse.error(HttpStatus.BAD_REQUEST, errorMessage);\n        }\n\n        const result = await action(params, { logger: logger, headers: params.__ow_headers || {} });\n        // log the error\n        logger.info(result);\n        return result;\n      } catch (error) {\n        // log any server errors\n        logger.error(error);\n        // return with 500\n        return RuntimeActionResponse.error(HttpStatus.INTERNAL_ERROR, 'server error');\n      }\n    };\n  }\n}\n\nexport default EventConsumerAction;\n","/**\n * Adobe App Builder GraphQL framework utilities\n *\n * Copyright © Adobe, Inc. All rights reserved.\n */\n\nimport { graphql, buildSchema, parse, validate } from 'graphql';\n\nimport RuntimeAction from '../runtime-action';\nimport RuntimeActionResponse from '../runtime-action/response';\n\nimport { HttpMethod, HttpStatus } from '../runtime-action/types';\nimport { RuntimeActionResponseType } from '../runtime-action/response/types';\n\nclass GraphQlAction {\n  static execute(\n    schema: string = `\n      type Query {\n        hello: String\n      }\n    `,\n    resolvers: (ctx: {\n      logger: any;\n      headers: { [key: string]: any };\n      params: { [key: string]: any };\n    }) => Promise<any> = async (_params): Promise<any> => {\n      return {\n        hello: (): string => 'Hello World!',\n      };\n    },\n    name: string = 'main',\n    disableIntrospection: boolean = false\n  ): (params: { [key: string]: any }) => Promise<RuntimeActionResponseType> {\n    return RuntimeAction.execute(\n      `graphql-${name}`,\n      [HttpMethod.GET, HttpMethod.POST],\n      ['query'],\n      [],\n      async (params, ctx) => {\n        let graphqlSchema;\n        try {\n          graphqlSchema = buildSchema(schema);\n        } catch (error) {\n          return RuntimeActionResponse.error(HttpStatus.BAD_REQUEST, (error as Error).message);\n        }\n        const graphqlResolvers = await resolvers({\n          ...ctx,\n          ...{\n            params,\n          },\n        });\n\n        const context = {};\n        const query = params.query;\n\n        let parsedQuery;\n        try {\n          parsedQuery = parse(query);\n        } catch (error) {\n          return RuntimeActionResponse.error(HttpStatus.BAD_REQUEST, (error as Error).message);\n        }\n\n        const validationErrors = validate(graphqlSchema, parsedQuery);\n        if (validationErrors.length) {\n          return RuntimeActionResponse.error(\n            HttpStatus.BAD_REQUEST,\n            validationErrors.map(err => err.message).join(', ')\n          );\n        }\n\n        if (disableIntrospection) {\n          // Check for introspection queries\n          const isIntrospectionQuery = parsedQuery.definitions.some((definition: any) =>\n            definition.selectionSet.selections.some((selection: any) =>\n              selection.name.value.startsWith('__')\n            )\n          );\n          if (isIntrospectionQuery) {\n            // return and log client errors\n            return RuntimeActionResponse.error(\n              HttpStatus.BAD_REQUEST,\n              'Introspection is disabled for security reasons.'\n            );\n          }\n        }\n\n        const variables =\n          typeof params.variables === 'string' ? JSON.parse(params.variables) : params.variables;\n\n        return RuntimeActionResponse.success(\n          await graphql({\n            schema: graphqlSchema,\n            source: query,\n            rootValue: graphqlResolvers,\n            contextValue: context,\n            variableValues: variables,\n            operationName: params.operationName,\n          })\n        );\n      }\n    );\n  }\n}\n\nexport default GraphQlAction;\n","/**\n * Adobe App Builder Webhook handler\n *\n * Copyright © Adobe, Inc. All rights reserved.\n */\n\nimport * as crypto from 'crypto';\nimport { Verify } from 'crypto';\n\nimport WebhookActionResponse from './response';\n\nimport RuntimeAction from '../runtime-action';\nimport RuntimeActionResponse from '../runtime-action/response';\nimport Parameters from '../runtime-action/parameters';\nimport Validator from '../runtime-action/validator';\n\nimport { HttpMethod, HttpStatus } from '../runtime-action/types';\nimport { SignatureVerification } from './types';\nimport { RuntimeActionResponseType } from '../runtime-action/response/types';\n\nclass WebhookAction {\n  /**\n   * @param name\n   * @param requiredParams\n   * @param requiredHeaders\n   * @param signatureVerification\n   * @param action\n   * @returns {(function(*): Promise<any>)|*}\n   */\n  static execute(\n    name: string = 'main',\n    requiredParams: string[] = [],\n    requiredHeaders: string[] = ['Authorization'],\n    signatureVerification: SignatureVerification = SignatureVerification.DISABLED,\n    action: (\n      params: { [key: string]: any },\n      ctx: { logger: any; headers: { [key: string]: any } }\n    ) => Promise<RuntimeActionResponseType> = async (\n      _params\n    ): Promise<RuntimeActionResponseType> => {\n      return { statusCode: HttpStatus.OK, body: {} };\n    }\n  ): (params: { [key: string]: any }) => Promise<RuntimeActionResponseType> {\n    return RuntimeAction.execute(\n      `webhook-${name}`,\n      [HttpMethod.GET, HttpMethod.POST],\n      [],\n      [],\n      async (params, ctx) => {\n        const operations = [];\n\n        if (params.__ow_body !== null) {\n          let payload = {};\n          try {\n            payload = JSON.parse(atob(params.__ow_body));\n          } catch {\n            // Ignore parsing errors\n          }\n          params = {\n            ...params,\n            ...payload,\n          };\n          // log parameters, only if params.LOG_LEVEL === 'debug'\n          ctx.logger.debug(Parameters.stringify(payload));\n        }\n\n        if (signatureVerification !== SignatureVerification.DISABLED) {\n          if (params.PUBLIC_KEY === undefined) {\n            operations.push(\n              WebhookActionResponse.exception(\n                'Magento\\\\Framework\\\\Exception\\\\LocalizedException',\n                'The public key is invalid'\n              )\n            );\n          } else {\n            // check for missing request input parameters and headers\n            const errorMessage: string =\n              Validator.checkMissingRequestInputs(params, requiredParams, requiredHeaders) || '';\n            if (errorMessage) {\n              // return and log client errors\n              return RuntimeActionResponse.error(HttpStatus.BAD_REQUEST, errorMessage);\n            }\n\n            const signature: any = params.__ow_headers['x-adobe-commerce-webhook-signature'] || '';\n            const verifier: Verify = crypto.createVerify('SHA256');\n            verifier.update(params.__ow_body);\n\n            let publicKey: string = params.PUBLIC_KEY;\n            if (signatureVerification === SignatureVerification.ENABLED_WITH_BASE64) {\n              publicKey = atob(publicKey);\n            }\n\n            const isSignatureValid = verifier.verify(publicKey, signature, 'base64');\n\n            if (isSignatureValid) {\n              operations.push(await action(params, ctx));\n            } else {\n              operations.push(\n                WebhookActionResponse.exception(\n                  'Magento\\\\Framework\\\\Exception\\\\LocalizedException',\n                  `The signature is invalid.`\n                )\n              );\n            }\n          }\n        } else {\n          // check for missing request input parameters and headers\n          const errorMessage: string =\n            Validator.checkMissingRequestInputs(params, requiredParams, requiredHeaders) || '';\n          if (errorMessage) {\n            // return and log client errors\n            return RuntimeActionResponse.error(HttpStatus.BAD_REQUEST, errorMessage);\n          }\n\n          operations.push(await action(params, ctx));\n        }\n\n        return RuntimeActionResponse.success(JSON.stringify(operations));\n      }\n    );\n  }\n}\n\nexport default WebhookAction;\n","/**\n * Adobe App Builder Webhook Response types and interfaces\n *\n * Copyright © Adobe, Inc. All rights reserved.\n */\n\nexport enum WebhookOperation {\n  SUCCESS = 'success',\n  EXCEPTION = 'exception',\n  ADD = 'add',\n  REPLACE = 'replace',\n  REMOVE = 'remove',\n}\n\nexport interface SuccessResponse {\n  op: typeof WebhookOperation.SUCCESS;\n}\n\nexport interface ExceptionResponse {\n  op: typeof WebhookOperation.EXCEPTION;\n  class?: string | undefined;\n  message?: string | undefined;\n}\n\nexport interface AddResponse {\n  op: typeof WebhookOperation.ADD;\n  path: string;\n  value: any;\n  instance?: string | undefined;\n}\n\nexport interface ReplaceResponse {\n  op: typeof WebhookOperation.REPLACE;\n  path: string;\n  value: any;\n  instance?: string | undefined;\n}\n\nexport interface RemoveResponse {\n  op: typeof WebhookOperation.REMOVE;\n  path: string;\n}\n","/**\n * Adobe App Builder Webhook Response utilities\n *\n * Copyright © Adobe, Inc. All rights reserved.\n */\n\nimport {\n  WebhookOperation,\n  SuccessResponse,\n  ExceptionResponse,\n  AddResponse,\n  ReplaceResponse,\n  RemoveResponse,\n} from './types';\n\nclass WebhookActionResponse {\n  static success(): SuccessResponse {\n    return {\n      op: WebhookOperation.SUCCESS,\n    };\n  }\n\n  static exception(exceptionClass?: string, message?: string): ExceptionResponse {\n    return {\n      op: WebhookOperation.EXCEPTION,\n      class: exceptionClass,\n      message: message,\n    };\n  }\n\n  static add(path: string, value: any, instance?: string): AddResponse {\n    return {\n      op: WebhookOperation.ADD,\n      path: path,\n      value: value,\n      instance: instance,\n    };\n  }\n\n  static replace(path: string, value: any, instance?: string): ReplaceResponse {\n    return {\n      op: WebhookOperation.REPLACE,\n      path: path,\n      value: value,\n      instance: instance,\n    };\n  }\n\n  static remove(path: string): RemoveResponse {\n    return {\n      op: WebhookOperation.REMOVE,\n      path: path,\n    };\n  }\n}\n\nexport default WebhookActionResponse;\n","/**\n * Adobe App Builder Webhook types and enums\n *\n * Copyright © Adobe, Inc. All rights reserved.\n */\n\nexport enum SignatureVerification {\n  DISABLED = 0,\n  ENABLED = 1,\n  ENABLED_WITH_BASE64 = 2,\n}\n","/**\n * Adobe App Builder OpenWhisk client wrapper\n *\n * Copyright © Adobe, Inc. All rights reserved.\n */\n\nimport openwhisk, { Activation, Dict } from 'openwhisk';\n\nclass Openwhisk {\n  /**\n   * @var openwhisk\n   */\n  openwhiskClient: ReturnType<typeof openwhisk>;\n\n  /**\n   * @param host\n   * @param apiKey\n   */\n  constructor(host: string, apiKey: string) {\n    this.openwhiskClient = openwhisk({ apihost: host, api_key: apiKey });\n  }\n\n  /**\n   * @param action\n   * @param params\n   * @returns {Promise<Activation<Dict>>}\n   */\n  async execute(action: string, params: Dict): Promise<Activation<Dict>> {\n    return await this.openwhiskClient.actions.invoke({\n      name: action,\n      blocking: true,\n      params: params,\n    });\n  }\n}\n\nexport default Openwhisk;\n","/**\n * Adobe App Builder OpenWhisk Action handler\n *\n * Copyright © Adobe, Inc. All rights reserved.\n */\n// OpenWhisk action handler - no direct client dependency needed\n\nimport { Core } from '@adobe/aio-sdk';\n\nimport RuntimeActionResponse from '../runtime-action/response';\nimport Parameters from '../runtime-action/parameters';\n\nimport { HttpStatus } from '../runtime-action/types';\nimport { RuntimeActionResponseType } from '../runtime-action/response/types';\n\nclass OpenwhiskAction {\n  /**\n   * @param name\n   * @param action\n   * @returns {(function(*): Promise<any>)|*}\n   */\n  static execute(\n    name: string = 'main',\n    action: (\n      params: { [key: string]: any },\n      ctx: { logger: any; headers: { [key: string]: any } }\n    ) => Promise<RuntimeActionResponseType> = async (\n      _params\n    ): Promise<RuntimeActionResponseType> => {\n      return { statusCode: HttpStatus.OK, body: {} };\n    }\n  ): (params: { [key: string]: any }) => Promise<RuntimeActionResponseType> {\n    return async (params: { [key: string]: any }) => {\n      // create a Logger\n      const logger = Core.Logger(name, { level: params.LOG_LEVEL || 'info' });\n\n      try {\n        // 'info' is the default level if not set\n        logger.info(`Calling the ${name} webhook action`);\n\n        // log parameters, only if params.LOG_LEVEL === 'debug'\n        logger.debug(Parameters.stringify(params));\n\n        const result = await action(params, { logger: logger, headers: params.__ow_headers || {} });\n        // log the error\n        logger.info(result);\n        return result;\n      } catch (error) {\n        // log any server errors\n        logger.error(error);\n        // return with 500\n        return RuntimeActionResponse.error(HttpStatus.INTERNAL_ERROR, 'server error');\n      }\n    };\n  }\n}\n\nexport default OpenwhiskAction;\n","/**\n * Copyright © Adobe, Inc. All rights reserved.\n */\n\n/**\n * Utility class for extracting and handling Bearer tokens from OpenWhisk action parameters\n */\nclass BearerToken {\n  /**\n   * Extracts the Bearer token from OpenWhisk action parameters.\n   * Looks for the authorization header in __ow_headers and extracts the token value\n   * after the \"Bearer \" prefix.\n   *\n   * @param params - OpenWhisk action input parameters containing headers\n   * @returns The Bearer token string if found, undefined otherwise\n   *\n   * @example\n   * const params = {\n   *   __ow_headers: {\n   *     authorization: 'Bearer abc123token'\n   *   }\n   * };\n   * const token = BearerToken.extract(params); // returns 'abc123token'\n   */\n  static extract(params: { [key: string]: any }): string | undefined {\n    if (params.__ow_headers?.authorization?.startsWith('Bearer ')) {\n      return params.__ow_headers.authorization.substring('Bearer '.length);\n    }\n    return undefined;\n  }\n}\n\nexport default BearerToken;\n","/**\n * Copyright © Adobe, Inc. All rights reserved.\n */\n\nimport fetch, { RequestInit, Response } from 'node-fetch';\nimport { Headers } from './types';\n\nclass RestClient {\n  /**\n   * A generic method to make GET rest call\n   *\n   * @param endpoint\n   * @param headers\n   * @returns {Promise<any>}\n   */\n  async get(endpoint: string, headers: Headers = {}): Promise<any> {\n    return await this.apiCall(endpoint, 'GET', headers);\n  }\n\n  /**\n   * A generic method to make POST rest call\n   *\n   * @param endpoint\n   * @param headers\n   * @param payload\n   * @returns {Promise<any>}\n   */\n  async post(endpoint: string, headers: Headers = {}, payload: any = null): Promise<any> {\n    return await this.apiCall(endpoint, 'POST', headers, payload);\n  }\n\n  /**\n   * A generic method to make PUT rest call\n   *\n   * @param endpoint\n   * @param headers\n   * @param payload\n   * @returns {Promise<any>}\n   */\n  async put(endpoint: string, headers: Headers = {}, payload: any = null): Promise<any> {\n    return await this.apiCall(endpoint, 'PUT', headers, payload);\n  }\n\n  /**\n   * A generic method to make DELETE rest call\n   *\n   * @param endpoint\n   * @param headers\n   * @returns {Promise<any>}\n   */\n  async delete(endpoint: string, headers: Headers = {}): Promise<any> {\n    return await this.apiCall(endpoint, 'DELETE', headers);\n  }\n\n  /**\n   * A generic method to make rest call\n   *\n   * @param endpoint\n   * @param method\n   * @param headers\n   * @param payload\n   * @returns {Promise<any>}\n   */\n  async apiCall(\n    endpoint: string,\n    method: string = 'POST',\n    headers: Headers = {},\n    payload: any = null\n  ): Promise<any> {\n    try {\n      let options: RequestInit = {\n        method: method,\n        headers: headers,\n      };\n\n      if (payload !== null) {\n        options = {\n          ...options,\n          body: JSON.stringify(payload),\n          headers: {\n            ...headers,\n            'Content-Type': 'application/json',\n          },\n        };\n      }\n\n      const response: Response = await fetch(endpoint, options);\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      // Handle responses with no content (like 204 No Content)\n      if (response.status === 204 || response.headers?.get('content-length') === '0') {\n        return null;\n      }\n\n      // Try JSON first (for both real responses and mocked responses)\n      if (typeof response.json === 'function') {\n        const contentType = response.headers?.get('content-type');\n        // If no content-type header (mocked response) or JSON content-type, parse as JSON\n        if (\n          !contentType ||\n          contentType.includes('application/json') ||\n          contentType.includes('application/hal+json')\n        ) {\n          return await response.json();\n        }\n      }\n\n      // For non-JSON responses, return text\n      if (typeof response.text === 'function') {\n        const text = await response.text();\n        return text;\n      }\n\n      // Fallback for responses without text/json methods\n      return null;\n    } catch (error) {\n      console.error('API call error:', error);\n      throw error;\n    }\n  }\n}\n\nexport default RestClient;\n","/**\n * Copyright © Adobe, Inc. All rights reserved.\n */\n\nimport { context, getToken } from '@adobe/aio-lib-ims';\nimport { AdobeIMSConfig } from './types';\n\n/**\n * Class providing authentication functionality for Adobe IMS (Identity Management System)\n */\nclass AdobeAuth {\n  /**\n   * Retrieves an authentication token from Adobe IMS\n   *\n   * @param clientId - The client ID for the Adobe IMS integration\n   * @param clientSecret - The client secret for the Adobe IMS integration\n   * @param technicalAccountId - The technical account ID for the Adobe IMS integration\n   * @param technicalAccountEmail - The technical account email for the Adobe IMS integration\n   * @param imsOrgId - The IMS organization ID\n   * @param scopes - Array of permission scopes to request for the token\n   * @param currentContext - The context name for storing the configuration (defaults to 'onboarding-config')\n   * @returns Promise<string> - A promise that resolves to the authentication token\n   *\n   * @example\n   * const token = await AdobeAuth.getToken(\n   *   'your-client-id',\n   *   'your-client-secret',\n   *   'your-technical-account-id',\n   *   'your-technical-account-email',\n   *   'your-ims-org-id',\n   *   ['AdobeID', 'openid', 'adobeio_api']\n   * );\n   */\n  static async getToken(\n    clientId: string,\n    clientSecret: string,\n    technicalAccountId: string,\n    technicalAccountEmail: string,\n    imsOrgId: string,\n    scopes: string[],\n    currentContext: string = 'onboarding-config'\n  ): Promise<string> {\n    const config: AdobeIMSConfig = {\n      client_id: clientId,\n      client_secrets: [clientSecret],\n      technical_account_id: technicalAccountId,\n      technical_account_email: technicalAccountEmail,\n      ims_org_id: imsOrgId,\n      scopes: scopes,\n    };\n\n    await context.setCurrent(currentContext);\n    await context.set(currentContext, config);\n\n    return await getToken();\n  }\n}\n\nexport default AdobeAuth;\n"],"mappings":"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","names":["response_default","HttpStatus","HttpMethod","errorMessage","import_aio_sdk","context","WebhookOperation","response_default","SignatureVerification","response_default","openwhisk","import_aio_sdk","fetch"]}